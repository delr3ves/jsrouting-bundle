// Generated by CoffeeScript 1.3.3
(function() {
  var root, _ref, _ref1;

  root = typeof global !== "undefined" && global !== null ? global : this;

  root.FUNDDY = (_ref = root.FUNDDY) != null ? _ref : {};

  root.FUNDDY.JsRouting = (_ref1 = root.FUNDDY.JsRouting) != null ? _ref1 : {};

  root = typeof global !== "undefined" && global !== null ? global : this;

  root.FUNDDY.JsRouting.Bag = (function() {

    function Bag(items) {
      this.items = items;
    }

    Bag.prototype.has = function(name) {
      return name in this.items;
    };

    Bag.prototype.get = function(name) {
      return this.items[name];
    };

    Bag.prototype.set = function(name, value) {
      return this.items[name] = value;
    };

    return Bag;

  })();

  root = typeof global !== "undefined" && global !== null ? global : this;

  root.FUNDDY.JsRouting.BagFactory = (function() {

    function BagFactory() {}

    BagFactory.prototype.createFromObject = function(object) {
      return new FUNDDY.JsRouting.Bag(object);
    };

    return BagFactory;

  })();

  root = typeof global !== "undefined" && global !== null ? global : this;

  root.FUNDDY.JsRouting.Route = (function() {
    var generateUrlPart;

    function Route(routeName, tokens, defaults) {
      this.routeName = routeName;
      this.tokens = tokens;
      this.defaults = defaults;
    }

    Route.prototype.process = function(parameters) {
      var token, tokenType, url, _i, _len, _ref2;
      url = "";
      _ref2 = this.tokens;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        token = _ref2[_i];
        tokenType = token[0];
        if (tokenType !== "text" && tokenType !== "variable") {
          throw new Error("Type of token " + token[0] + " not recognized");
        }
        if (tokenType === "text") {
          url = token[1] + url;
        } else if (tokenType === "variable") {
          url = this.generateUrlIfTokenTypeIsVariable(token, parameters) + url;
        }
      }
      return url;
    };

    Route.prototype.generateUrlIfTokenTypeIsVariable = function(token, parameters) {
      var parameterName, value;
      parameterName = token[3];
      if (!parameters.has(parameterName) && !this.defaults.has(parameterName)) {
        throw new Error("The route " + this.routeName + " requires de parameter " + parameterName);
      }
      value = this.generateValue(parameterName, parameters);
      return generateUrlPart(token, value);
    };

    Route.prototype.generateValue = function(parameterName, parameters) {
      if (this.defaults.has(parameterName)) {
        return this.defaults.get(parameterName);
      }
      if (parameters.has(parameterName)) {
        return parameters.get(parameterName);
      }
      return null;
    };

    generateUrlPart = function(token, value) {
      if (value) {
        return token[1] + encodeURIComponent(value).replace(/%2F/g, "/");
      }
      return "";
    };

    return Route;

  })();

  root = typeof global !== "undefined" && global !== null ? global : this;

  root.FUNDDY.JsRouting.RouteFactory = (function() {

    function RouteFactory() {}

    RouteFactory.prototype.create = function(routeName, tokens, defaults) {
      return new FUNDDY.JsRouting.Route(routeName, tokens, defaults);
    };

    return RouteFactory;

  })();

  root = typeof global !== "undefined" && global !== null ? global : this;

  root.FUNDDY.JsRouting.Router = (function() {
    var processedRoutes;

    processedRoutes = null;

    function Router(routesData, bagFactory, routeFactory, baseUrl) {
      this.routesData = routesData;
      this.bagFactory = bagFactory;
      this.routeFactory = routeFactory;
      this.baseUrl = baseUrl != null ? baseUrl : "";
      processedRoutes = this.bagFactory.createFromObject({});
    }

    Router.prototype.generate = function(routeName, parameters) {
      var routeData;
      if (parameters == null) {
        parameters = {};
      }
      routeData = this.getAndcheckRouteDataExist(routeName);
      if (!processedRoutes.has(routeName)) {
        processedRoutes.set(routeName, this.createRouteFromData(routeName, routeData));
      }
      parameters = this.bagFactory.createFromObject(parameters);
      return this.baseUrl + processedRoutes.get(routeName).process(parameters);
    };

    Router.prototype.createRouteFromData = function(routeName, routeData) {
      var defaults;
      defaults = this.bagFactory.createFromObject(routeData.defaults);
      return this.routeFactory.create(routeName, routeData.tokens, defaults);
    };

    Router.prototype.getAndcheckRouteDataExist = function(routeName) {
      if (!this.routesData.hasOwnProperty(routeName)) {
        throw new Error("Route '" + routeName + "' doesn't exist");
      }
      return this.routesData[routeName];
    };

    return Router;

  })();

}).call(this);
